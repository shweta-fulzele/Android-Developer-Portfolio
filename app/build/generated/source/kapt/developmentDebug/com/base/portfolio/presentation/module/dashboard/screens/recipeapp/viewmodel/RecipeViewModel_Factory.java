// Generated by Dagger (https://dagger.dev).
package com.base.portfolio.presentation.module.dashboard.screens.recipeapp.viewmodel;

import com.base.portfolio.presentation.module.dashboard.screens.recipeapp.repository.RecipeRepositoryImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RecipeViewModel_Factory implements Factory<RecipeViewModel> {
  private final Provider<RecipeRepositoryImpl> repositoryProvider;

  private final Provider<RecipeRepositoryImpl> recipeRepositoryProvider;

  public RecipeViewModel_Factory(Provider<RecipeRepositoryImpl> repositoryProvider,
      Provider<RecipeRepositoryImpl> recipeRepositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    this.recipeRepositoryProvider = recipeRepositoryProvider;
  }

  @Override
  public RecipeViewModel get() {
    RecipeViewModel instance = newInstance(repositoryProvider.get());
    RecipeViewModel_MembersInjector.injectRecipeRepository(instance, recipeRepositoryProvider.get());
    return instance;
  }

  public static RecipeViewModel_Factory create(Provider<RecipeRepositoryImpl> repositoryProvider,
      Provider<RecipeRepositoryImpl> recipeRepositoryProvider) {
    return new RecipeViewModel_Factory(repositoryProvider, recipeRepositoryProvider);
  }

  public static RecipeViewModel newInstance(RecipeRepositoryImpl repository) {
    return new RecipeViewModel(repository);
  }
}
